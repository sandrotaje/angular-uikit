/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 13);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = ukNgAutocomplete;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

ukNgAutocomplete.$inject = ['$http', '$timeout'];
function ukNgAutocomplete($http, $timeout) {
    return {
        restrict: 'A',
        require: 'ngModel',
        scope: {
            ukSource: '=?',
            ukSourcePath: '=?',
            ukLabel: '=?',
            ukTemplate: '=?',
            ukOnSelect: '&'
        },
        link: function link(scope, elem, attrs, ngModel) {

            var resultsTemplate = scope.ukTemplate ? scope.ukTemplate : '<ul class="uk-nav uk-nav-autocomplete uk-autocomplete-results">{{~items}}<li data-id="{{$item.id}}" data-value="{{$item.value}}"><a>{{$item.value}}</a></li>{{/items}}</ul>';

            var source = scope.ukSourcePath ? callback : scope.ukSource ? populateSource(scope.ukSource) : [{ id: undefined, value: 'No source detected!' }];

            var autocomplete = UIkit.autocomplete(elem.parent(), {
                source: source,
                minLength: 1,
                delay: 0,
                template: resultsTemplate
            });

            scope.$watch('ukSource', function () {
                autocomplete.options.source = source = scope.ukSourcePath ? callback : scope.ukSource ? populateSource(scope.ukSource) : [{ id: undefined, value: 'No source detected!' }];
                //ngModel.$render();
            });

            function populateSource(objects) {
                var autocompleteRenderedObjects = [];
                objects.forEach(function (element, index) {
                    var label = typeof element === 'string' || element instanceof String ? element : element[scope.ukLabel] ? element[scope.ukLabel] : 'Label missing!';
                    autocompleteRenderedObjects.push({ id: element.id ? element.id : index, value: label });
                });
                return autocompleteRenderedObjects;
            }

            function callback(release) {
                var search = {};
                search[scope.ukLabel ? scope.ukLabel : "search"] = ngModel.$viewValue;
                $http({
                    method: "GET",
                    url: scope.ukSourcePath,
                    params: search
                }).then(function (resp) {
                    scope.ukSource = resp.data;
                    release(populateSource(resp.data));
                }, function () {
                    release([{ id: undefined, value: 'Error retrieving data' }]);
                });
            }

            ngModel.$formatters = [function (value) {
                var realValue = scope.ukLabel ? value[scope.ukLabel] : value;

                if (!angular.isArray(source) || source.some(function (e) {
                    return realValue == e.value;
                })) return realValue;

                return undefined;
            }];

            ngModel.$parsers.unshift(function (viewValue) {
                if (typeof viewValue !== 'string' && !(viewValue instanceof String)) return viewValue;

                if (!angular.isArray(source)) {
                    //if source is not an array it is a callback function
                    return _defineProperty({ id: undefined, value: viewValue }, scope.ukLabel, viewValue);
                }

                return source.find(function (e) {
                    return e.value == viewValue;
                });
            }, function (viewValue) {
                if (!angular.isArray(scope.ukSource)) {
                    //No source means callback function (init)
                    return viewValue;
                }

                return scope.ukSource.find(function (el) {
                    if (el.id) return el.id == viewValue.id;

                    return el == viewValue.value || el[scope.ukLabel] == viewValue.value;
                });
            });

            autocomplete.on('selectitem.uk.autocomplete', function (event, ui, obj) {
                if (ui) {
                    ngModel.$setViewValue(ui);

                    if (scope.ukOnSelect) {
                        $timeout(function () {
                            var item = scope.ukSource.find(function (el) {
                                if (el.id) return el.id == ui.id;

                                return el == ui.value || el[scope.ukLabel] == ui.value;
                            });
                            scope.ukOnSelect({ $selectedItem: item });
                        });
                    }
                }
            });
        }
    };
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = ukNgCalendar;

__webpack_require__(8);

var templateUrl = __webpack_require__(10);
function ukNgCalendar() {
    return {
        restrict: "EA",
        scope: {
            date: "=?",
            getEventsByDate: "&?",
            onEventSelected: "&?"
        },
        templateUrl: templateUrl,
        link: function link(scope, element, attrs) {

            var ONE_DAY = 24 * 60 * 60 * 1000;

            scope.hasDaySelected = function (w) {
                if (!w) return false;
                for (var i = 0; i < w.length; i++) {
                    var el = w[i];
                    if (el.isSelected) return true;
                }
                return false;
            };

            scope.changeDate = function () {
                scope.date = new Date(Date.UTC(scope.yearSelected, scope.months.indexOf(scope.monthSelected), 1));
            };

            scope.addMonth = function (num) {

                var futureMonth = scope.date.getUTCMonth() + num;

                //11 is december
                if (futureMonth > 11) {
                    scope.date = new Date(Date.UTC(scope.date.getUTCFullYear() + 1, 0, 1));
                } else if (futureMonth < 0) {
                    scope.date = new Date(Date.UTC(scope.date.getUTCFullYear() - 1, 11, 1));
                } else {
                    scope.date = new Date(Date.UTC(scope.date.getUTCFullYear(), futureMonth, 1));
                }
            };

            scope.getDaysRemaining = function (numDays, day) {
                var dayRem = 7 - day;
                var num = numDays + 1;
                if (num > dayRem) {
                    return dayRem;
                }
                return num;
            };

            scope.selectEvent = function (e) {
                scope.onEventSelected && scope.onEventSelected({ $event: e });
            };

            scope.getStyle = function (style) {
                var ngStyle = {};
                if (style) {
                    if (style.color) {
                        ngStyle['color'] = style.color;
                    }
                    if (style.background) {
                        ngStyle['background'] = style.background;
                    }
                    return ngStyle;
                }
                return {};
            };

            scope.getNumDays = function (startDate, endDate) {
                var startDate = new Date(startDate.getTime());
                var endDate = new Date(endDate.getTime());
                var tempDay = 1;
                if (endDate.getUTCMonth() != startDate.getUTCMonth()) {
                    tempDay += endDate.getUTCDate();
                    endDate.setUTCDate(0);
                }
                return endDate.getUTCDate() - startDate.getUTCDate() + tempDay;
            };

            scope.$watch("date", function () {

                if (!scope.date) {
                    scope.date = new Date();
                }

                var date = angular.copy(scope.date);

                scope.years = [2014, 2015, 2016, 2017];
                scope.months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

                scope.yearSelected = date.getUTCFullYear();
                scope.monthSelected = scope.months[date.getUTCMonth()];

                date.setUTCHours(0);
                date.setUTCMinutes(0);
                date.setUTCSeconds(0);
                date.setUTCMilliseconds(0);

                var today = new Date();
                today.setUTCHours(0);
                today.setUTCMinutes(0);
                today.setUTCSeconds(0);
                today.setUTCMilliseconds(0);

                var startDate = new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), 1));

                while (startDate.getUTCDay() != 1) {
                    startDate = new Date(startDate.getTime() - ONE_DAY);
                }

                var tmpDay = new Date(startDate.getTime());

                var month = {
                    weeks: []
                };

                var generateMonth = function generateMonth(tmpDay, eventMap) {
                    var week = 0;
                    for (var i = 0; i < 42; i++) {

                        if (tmpDay.getUTCDay() == 1) {
                            week++;
                        }

                        var jsonDay = {
                            number: tmpDay.getUTCDate(),
                            isToday: tmpDay.getTime() === today.getTime(),
                            date: tmpDay,
                            differentMonth: tmpDay.getUTCMonth() !== date.getUTCMonth(),
                            events: eventMap[tmpDay.getUTCFullYear() + "" + tmpDay.getUTCMonth() + "" + tmpDay.getUTCDate()]
                        };
                        if (!month.weeks[week]) {
                            month.weeks[week] = [];
                        }
                        month.weeks[week].push(jsonDay);
                        tmpDay = new Date(tmpDay.getTime() + ONE_DAY);
                    }

                    scope.month = month;
                };

                if (!scope.getEventsByDate) {
                    generateMonth(tmpDay, []);
                } else {
                    scope.getEventsByDate({ $startDate: startDate, $endDate: new Date(startDate.getTime() + 42 * ONE_DAY) }).then(function (events) {
                        var eventMap = {};
                        var events = [].concat(events);
                        events.forEach(function (e) {
                            e.original = Object.assign({}, e);
                            e.startDate = angular.isDate(e.startDate) ? e.startDate : new Date(e.startDate);
                            e.endDate = angular.isDate(e.endDate) ? e.endDate : new Date(e.endDate);

                            var tmpDay = e.startDate;
                            e.numDays = scope.getNumDays(e.startDate, e.endDate);
                            e.firstDay = true;
                            while (tmpDay <= e.endDate) {
                                if (!eventMap[tmpDay.getUTCFullYear() + "" + tmpDay.getUTCMonth() + "" + tmpDay.getUTCDate()]) {
                                    eventMap[tmpDay.getUTCFullYear() + "" + tmpDay.getUTCMonth() + "" + tmpDay.getUTCDate()] = [];
                                }
                                eventMap[tmpDay.getUTCFullYear() + "" + tmpDay.getUTCMonth() + "" + tmpDay.getUTCDate()].push(angular.copy(e));
                                tmpDay = new Date(tmpDay.getTime() + 24 * 60 * 60 * 1000);
                                e.firstDay = false;
                            }
                        });

                        generateMonth(tmpDay, eventMap);
                    }, function (error) {
                        console.log(error);
                    });
                }
            });
        }
    };
}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = hxSubmitOnEnter;
hxSubmitOnEnter.$inject = ['$timeout'];
function hxSubmitOnEnter($timeout) {
    return {
        restrict: 'A',
        require: 'form',
        scope: {
            hxSubmitOnEnter: "&",
            hxSubmitOnEnterAllowed: "=?"
        },
        link: function link(scope, element, attrs, formController) {
            if (scope.hxSubmitOnEnterAllowed) {
                element.on("keydown keypress", function (event) {
                    if (event.which === 13 && formController.$valid) {
                        event.preventDefault();
                        $timeout(function () {
                            scope.hxSubmitOnEnter();
                        });
                    }
                });
            }
        }
    };
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = ukNgJsonTableForm;

__webpack_require__(9);

var _templateUrl = __webpack_require__(12);
var compactTemplateUrl = __webpack_require__(11);

ukNgJsonTableForm.$inject = ['$compile', '$timeout'];
function ukNgJsonTableForm($compile, $timeout) {
    return {
        restrict: "EA",
        scope: {
            model: "=",
            structure: "=",
            readOnly: "=?",
            canReorder: "=?",
            allHeaderInHead: "=?",
            noHeader: "=?",
            deleteConfirmLabel: "=?",
            submitOnEnter: "=?",
            compact: "=?",
            oddIteration: "=?"
        },
        templateUrl: function templateUrl(elm, attrs) {
            return !attrs.compact || attrs.compact === 'false' ? _templateUrl : compactTemplateUrl;
        },
        link: function link(scope, element, attrs) {

            if (scope.compact) {
                if (scope.oddIteration == undefined) scope.oddIteration = false;
                scope.arraysStructure = [];
                scope.valuesStructure = [];

                scope.structure.forEach(function (el) {
                    if (el.type != "array") scope.valuesStructure.push(el);else scope.arraysStructure.push(el);
                });
            }

            scope.newItem = {};
            if (!scope.model) {
                scope.model = [];
            }

            scope.addItem = function () {
                scope.model.push(angular.copy(scope.newItem));
                scope.newItem = {};
            };

            scope.removeItem = function removeItem(index) {
                UIkit.modal.confirm(scope.deleteConfirmLabel || "Are you sure?", function () {
                    $timeout(function () {
                        scope.model.splice(index, 1);
                    });
                });
            };

            scope.getHeaders = function (struct) {
                var firstRow = [];
                var secondRow = [];
                var countNotArray = function countNotArray(array) {
                    return array.filter(function (el) {
                        return el.type != 'array';
                    }).length;
                };
                var first = true;
                var recur = function recur(arr) {
                    arr.forEach(function (s) {
                        if (s.type != 'array') {
                            if (first) {
                                firstRow.push({ colspan: 1 });
                            }
                            secondRow.push(s);
                        } else {
                            first = false;

                            var colspan = countNotArray(s.items);

                            firstRow.push({
                                label: s.label,
                                colspan: colspan
                            });
                            recur(s.items);
                        }
                    });
                };
                recur(struct);
                return { firstRow: firstRow, secondRow: secondRow };
            };

            scope.objectify = function (el) {
                var newObj = {};
                if (angular.isArray(el)) {
                    el.forEach(function (e) {
                        newObj[e] = e;
                    });
                    return newObj;
                }
                return el;
            };

            scope.toggleIndexSelection = function (index) {
                if (scope.selectedIndex == index) scope.selectedIndex = null;else scope.selectedIndex = index;
            };

            scope.moveSelectedModelElementUp = function () {
                swapArrayElements(scope.model, scope.selectedIndex, --scope.selectedIndex);
            };

            scope.moveSelectedModelElementDown = function () {
                swapArrayElements(scope.model, scope.selectedIndex, ++scope.selectedIndex);
            };

            function swapArrayElements(array, from, to) {
                var temp = array[to];
                array[to] = array[from];
                array[from] = temp;
            }
        }
    };
}

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = ukNgNotAllowArrayDuplicate;
function ukNgNotAllowArrayDuplicate() {
    return {
        restrict: "A",
        require: "ngModel",
        scope: {
            ukNgNotAllowArrayDuplicate: "=?",
            callbackUrl: "&?" //TODO
        },
        link: function link(scope, element, attrs, ngModelController) {
            ngModelController.$parsers.unshift(function (value) {
                if (ngModelController.$modelValue !== value) {
                    var valid = !scope.ukNgNotAllowArrayDuplicate.source.some(function (elem) {
                        var existingValue = elem[scope.ukNgNotAllowArrayDuplicate.attribute];
                        if (existingValue && value) return existingValue.toUpperCase() === value.toUpperCase();
                        return false;
                    });

                    ngModelController.$setValidity('duplicate', valid);
                    return valid ? value : undefined;
                }
            });

            ngModelController.$formatters.unshift(function (value) {
                ngModelController.$setValidity('duplicate', !scope.ukNgNotAllowArrayDuplicate.source.some(function (elem) {
                    var existingValue = elem[scope.ukNgNotAllowArrayDuplicate.attribute];
                    if (existingValue && value) return existingValue.toUpperCase() === value.toUpperCase();
                    return false;
                }));
                return value;
            });
        }
    };
}

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = ukNgPagination;
function ukNgPagination() {
    return {
        restrict: 'AE',
        scope: {
            listSize: '=',
            pageSize: '=',
            currentPage: '=?',
            onPageChange: '&'
        },
        link: function link(scope, element, attrs) {
            var ukPaginationOptions = {
                items: scope.listSize,
                itemsOnPage: scope.pageSize,
                currentPage: scope.currentPage ? scope.currentPage : 0,
                displayedPages: 3,
                edges: 1
            };

            var pagination = UIkit.pagination(element, ukPaginationOptions);
            window.pag = pagination;

            element.on('select.uk.pagination', function (e, pageIndex) {
                scope.onPageChange({ $page: pageIndex });
            });

            scope.$watch('listSize', function () {
                pagination.options.items = scope.listSize;
                pagination.pages = Math.ceil(scope.listSize / scope.pageSize);
                pagination.render();
            });

            scope.$watch('pageSize', function () {
                pagination.options.itemsOnPage = scope.pageSize;
                pagination.pages = Math.ceil(scope.listSize / scope.pageSize);
                pagination.render();
            });
        }
    };
}

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = ukNgSortableItem;
function ukNgSortableItem() {
    return {
        restrict: 'A',
        scope: {
            item: '=ukNgSortableItem'
        },
        require: "^^ukNgSortable",
        link: function link(scope, element, attrs, ctrl) {
            ctrl.addItem(element, scope.item);
        }
    };
}

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = ukNgSortable;
function ukNgSortable() {
    return {
        restrict: 'A',
        scope: {
            options: '=ukNgSortable'
        },
        controller: ["$scope", "$element", function ($scope, $element) {

            var ctrl = this;

            UIkit.sortable($element[0], $scope.options);
            $element.on('stop.uk.sortable', function (a, b, c, d) {
                $scope.$applyAsync(function () {
                    jQuery($element[0]).children().each(function (i, el) {
                        var found = ctrl.items.find(function (elem) {
                            return elem.element[0] === el;
                        });
                        found.item.order = i + 1;
                    });
                });
            });
            ctrl.items = [];

            ctrl.addItem = function (element, i) {
                ctrl.items.push({
                    element: element,
                    item: i
                });
            };
        }]
    };
}

/***/ }),
/* 8 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 9 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 10 */
/***/ (function(module, exports) {

var path = 'C:/Users/Manuel/IdeaProjects/angular-uikit/src/angular-uikit-calendar.html';
var html = "<div class=\"uk-grid uk-grid-collapse calendar\">\r\n   <div class=\"uk-width-1-1 calendar-nav\">\r\n      <a href=\"\" class=\"uk-icon-hover uk-icon-chevron-left\" ng-click=\"addMonth(-1)\"></a>\r\n      <div class=\"uk-form-select\" data-uk-form-select=\"{target:'a'}\">\r\n         <a>{{monthSelected}}</a> \r\n         <select ng-model=\"monthSelected\" ng-change=\"changeDate()\">\r\n            <option data-ng-repeat=\"m in months\" ng-value=\"m\">{{m}}</option>\r\n         </select>\r\n      </div>\r\n      <div class=\"uk-form-select\" data-uk-form-select=\"{target:'a'}\">\r\n         <a>{{yearSelected}}</a> \r\n         <select ng-model=\"yearSelected\" ng-change=\"changeDate()\">\r\n            <option data-ng-repeat=\"y in years | orderBy\" ng-value=\"y\">{{y}}</option>\r\n         </select>\r\n      </div>\r\n      <a href=\"\" class=\"uk-icon-hover uk-icon-chevron-right\" ng-click=\"addMonth(1)\"></a>\r\n   </div>\r\n   <div class=\"uk-width-1-1 calendar-header\">\r\n      <div class=\"uk-grid uk-grid-collapse calendar-header\">\r\n         <div class=\"uk-width calendar-header-day\" style=\"width: calc(100%/7)\" data-ng-repeat=\"d in ['Lun','Mar','Mer','Gio','Ven','Sab','Dom']\">\r\n            <div class=\"uk-panel uk-panel-box\">\r\n               <h3 class=\"uk-panel-title\">{{d}}</h3>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   </div>\r\n   <div class=\"uk-width-1-1 calendar-body\">\r\n      <div class=\"uk-grid uk-grid-collapse\" data-ng-repeat=\"w in month.weeks\" data-uk-grid-match=\"{target:'.uk-panel'}\">\r\n         <div class=\"uk-width calendar-day\" style=\"width: calc(100%/7)\" data-ng-repeat=\"d in w\" data-ng-init=\"dayIndex = $index\">\r\n            <div class=\"uk-panel uk-panel-box uk-panel-hover\">\r\n               <div class=\"calendar-number\" ng-class=\"{'calendar-different-month-day':d.differentMonth}\">{{d.number}}</div>\r\n               <div data-ng-style=\"getStyle(e.style)\" data-ng-click=\"selectEvent(e.original)\" class=\"calendar-event {{e.className}}\" data-ng-class=\"{'multiday': e.numDays>1 && dayIndex!=6}\" data-ng-repeat=\"e in d.events | orderBy: ['-numDays','content']\">\r\n                   <span style=\"max-width: calc(100%*{{getDaysRemaining(e.numDays, dayIndex)}} - 10px)\" data-ng-if=\"e.firstDay || dayIndex==0\">{{e.content}}</span>\r\n                </div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n      <!--<div data-ng-repeat-end class=\"uk-block calendar-day-detail\" ng-if=\"hasDaySelected(w)\">-->\r\n      <!--Dettaglio-->\r\n      <!--</div>-->\r\n   </div>\r\n</div>";
window.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);
module.exports = path;

/***/ }),
/* 11 */
/***/ (function(module, exports) {

var path = 'C:/Users/Manuel/IdeaProjects/angular-uikit/src/angular-uikit-jsontableform-compact.html';
var html = "<div class=\"uk-form uk-form-stacked\">\r\n    <fieldset>\r\n        <table class=\"uk-table uk-ng-table-form\" ng-class=\"{'jsontableform-highlight-border-odd': oddIteration, 'jsontableform-highlight-border-even': !oddIteration}\">\r\n            <thead ng-if=\"!noHeader\">\r\n            <tr>\r\n                <th ng-if=\"canReorder && !readOnly\" class=\"reorder-button-group uk-text-center\">\r\n                    <a ng-class=\"{'inactive': selectedIndex==null || selectedIndex==model.length-1}\" ng-click=\"moveSelectedModelElementDown()\" class=\"uk-text-primary uk-icon-small uk-icon-hover uk-icon-caret-down\"></a>\r\n                    <a ng-class=\"{'inactive': !selectedIndex}\" ng-click=\"moveSelectedModelElementUp()\" class=\"uk-text-primary uk-icon-hover uk-icon-caret-up uk-icon-small\"></a>\r\n                </th>\r\n                <th data-ng-repeat=\"h in valuesStructure\" ng-class=\"{'uk-width-1-10': h.type=='sequence'}\">\r\n                    <i ng-if=\"h.icon\" class=\"uk-icon-{{h.icon}}\"></i> {{h.label}}\r\n                </th>\r\n                <th ng-if=\"!readOnly\"></th>\r\n            </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n            <tr data-ng-repeat-start=\"m in model track by $index\" ng-mouseenter=\"rowHover=true\" ng-mouseleave=\"rowHover=false\" style=\"border-bottom: none !important\">\r\n                <td rowspan=\"{{arraysStructure.length+1}}\" ng-if=\"canReorder && !readOnly\" class=\"uk-text-center uk-table-middle\" style=\"cursor: pointer\" ng-click=\"toggleIndexSelection($index)\">\r\n                    <i class=\"uk-icon uk-icon-circle uk-text-primary\" ng-show=\"selectedIndex==$index\"></i>\r\n                    <i class=\"uk-icon uk-icon-circle-o uk-text-primary\" ng-show=\"rowHover && selectedIndex!=$index\"></i>\r\n                </td>\r\n                <td data-ng-repeat=\"s in valuesStructure\" class=\"uk-table-middle\">\r\n                    <div ng-switch=\"s.type\">\r\n                        <!-- AUTOCOMPLETE -->\r\n                        <div ng-switch-when=\"autocomplete\">{{m[s.property][s.autocomplete.label]?m[s.property][s.autocomplete.label]:m[s.property]}}</div>\r\n\r\n                        <!-- SEQUENCE -->\r\n                        <div ng-switch-when=\"sequence\">{{m.sequence = $parent.$parent.$index + 1}}</div>\r\n\r\n                        <!-- IMAGE -->\r\n                        <div ng-switch-when=\"image\">\r\n                            <img class=\"uk-thumbnail\" ng-style=\"{'max-width': s.image.maxWidth?s.image.maxWidth+'px':'100%', 'max-height': s.image.maxHeight?s.image.maxHeight+'px':'100%'}\" ng-src=\"{{m[s.property]?(s.image.interpolate? s.image.interpolate.base.replace(s.image.interpolate.value, s.image.interpolate.useId?m[s.property].id:m[s.property]): m[s.property]):s.image.default}}\" alt=\"\">\r\n                        </div>\r\n\r\n                        <!-- SELECT -->\r\n                        <div ng-switch-when=\"select\">\r\n                            <div ng-if=\"!readOnly\">\r\n                                <select ng-if=\"s.select.label\"\r\n                                        name=\"{{s.property}}\"\r\n                                        data-ng-model=\"m[s.property]\"\r\n                                        class=\"uk-form-blank uk-width-1-1\"\r\n                                        ng-options=\"opt[s.select.label] for opt in s.select.options track by opt[s.select.id]\"\r\n                                        ng-required=\"s.required\"\r\n                                        title=\"{{s.property}}\"></select>\r\n\r\n                                <select ng-if=\"!s.select.label\"\r\n                                        name=\"{{s.property}}\"\r\n                                        data-ng-model=\"m[s.property]\"\r\n                                        class=\"uk-form-blank uk-width-1-1\"\r\n                                        ng-options=\"value as label for (label, value) in objectify(s.select.options)\"\r\n                                        ng-required=\"s.required\"\r\n                                        title=\"{{s.property}}\"></select>\r\n                            </div>\r\n                            <div ng-if=\"readOnly\">\r\n                                <div ng-if=\"s.select.label\">{{m[s.property][s.select.label]}}</div>\r\n                                <div ng-if=\"!s.select.label\">{{m[s.property]}}</div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- NUMBER -->\r\n                        <div ng-switch-when=\"number\">\r\n                            <input name=\"{{s.property}}\"\r\n                                   data-ng-model=\"m[s.property]\"\r\n                                   type=\"number\"\r\n                                   class=\"uk-form-blank uk-width-1-1\"\r\n                                   data-ng-max=\"{{s.number.max}}\"\r\n                                   data-ng-min=\"{{s.number.min}}\"\r\n                                   ng-required=\"s.required\"\r\n                                   title=\"{{s.property}}\"\r\n                                   ng-if=\"!readOnly\">\r\n                            <div ng-if=\"readOnly\">\r\n                                {{m[s.property]}}\r\n                            </div>\r\n                        </div>\r\n                        <!-- DEFAULT -->\r\n                        <div ng-switch-default>\r\n                            <input name=\"{{s.property}}\"\r\n                                   data-ng-model=\"m[s.property]\"\r\n                                   type=\"{{s.type}}\"\r\n                                   placeholder=\"{{s.placeholder?s.placeholder:''}}\"\r\n                                   class=\"uk-form-blank uk-width-1-1\"\r\n                                   ng-required=\"s.required\"\r\n                                   ng-if=\"!readOnly\">\r\n\r\n                            <div ng-if=\"readOnly\">\r\n                                {{m[s.property]}}\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </td>\r\n\r\n                <!-- TRASH BUTTON -->\r\n                <td rowspan=\"{{arraysStructure.length+1}}\" ng-if=\"!readOnly\" class=\"jstableform-button\">\r\n                    <button type=\"button\" class=\"uk-button uk-text-danger uk-width-1-1 uk-height-1-1\" ng-click=\"removeItem($index)\">\r\n                        <i class=\"uk-icon-trash uk-icon-small\"></i>\r\n                    </button>\r\n                </td>\r\n            </tr>\r\n\r\n            <tr data-ng-repeat-end data-ng-if=\"arraysStructure.length\" style=\"border-top: none !important\">\r\n                <td colspan=\"{{valuesStructure.length}}\" data-ng-repeat=\"s in arraysStructure\">\r\n                    <div class=\"uk-accordion\" ng-if=\"!readOnly || m[s.property].length>0\" data-uk-accordion=\"{showfirst: false, collapse: false, toggle: '.uk-accordion-title-{{s.property}}', containers:'.uk-accordion-content-{{s.property}}'}\">\r\n                        <a ng-init=\"accordion.show = false\" ng-click=\"accordion.show=!accordion.show\" class=\"uk-width-1-1 uk-button uk-button-large uk-accordion-title-{{s.property}}\"\r\n                           ng-class=\"{'jsontableform-highlight-border-odd': !oddIteration, 'jsontableform-highlight-border-even': oddIteration}\">\r\n                            <span class=\"uk-float-left\">\r\n                                    <i ng-hide=\"accordion.show\" class=\"uk-icon-caret-right\"></i>\r\n                                    <i ng-show=\"accordion.show\" class=\"uk-icon-caret-down\"></i>\r\n                            </span>\r\n                            <span class=\"uk-float-left uk-margin-left\">\r\n                                    <i ng-if=\"s.icon\" class=\"uk-icon-{{s.icon}}\"></i> {{m[s.property].length}} {{s.label}}\r\n                            </span>\r\n                        </a>\r\n                        <div class=\"uk-accordion-content-{{s.property}}\">\r\n                            <div data-uk-ng-json-table-form\r\n                                 data-compact=\"compact\"\r\n                                 data-model=\"m[s.property]\"\r\n                                 data-can-reorder=\"s.canReorder\"\r\n                                 data-structure=\"s.items\"\r\n                                 data-read-only=\"readOnly\"\r\n                                 data-delete-confirm-label=\"deleteConfirmLabel\"\r\n                                 data-all-header-in-head=\"allHeaderInHead\"\r\n                                 data-property-name=\"m[s.property]\"\r\n                                 data-odd-iteration=\"!oddIteration\">\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div ng-if=\"readOnly&&!m[s.property]\" class=\"uk-width-1-1 uk-button uk-button-large\" ng-class=\"{'jsontableform-highlight-border-odd': !oddIteration, 'jsontableform-highlight-border-even': oddIteration}\">\r\n                            <span class=\"uk-float-left uk-margin-left\">\r\n                                    <i ng-if=\"s.icon\" class=\"uk-icon-{{s.icon}}\"></i> 0 {{s.label}}\r\n                                </span>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n\r\n            <tr ng-if=\"!readOnly\" ng-form=\"newItemForm\" hx-submit-on-enter-allowed=\"submitOnEnter\" hx-submit-on-enter=\"addItem()\" class=\"input-row\">\r\n                <td ng-if=\"canReorder\"></td>\r\n\r\n                <td data-ng-repeat=\"h in valuesStructure\">\r\n                    <div ng-switch=\"h.type\">\r\n\r\n                        <!-- SEQUENCE -->\r\n                        <span ng-switch-when=\"sequence\">#</span>\r\n\r\n                        <!-- SELECT -->\r\n                        <div ng-switch-when=\"select\">\r\n                            <select ng-if=\"h.select.label\"\r\n                                    name=\"{{h.property}}\"\r\n                                    data-ng-model=\"newItem[h.property]\"\r\n                                    class=\"uk-width-1-1\"\r\n                                    ng-options=\"opt[h.select.label] for opt in h.select.options track by opt[h.select.id]\"\r\n                                    ng-required=\"h.required\"\r\n                                    title=\"{{h.property}}\"></select>\r\n\r\n                            <select ng-if=\"!h.select.label\"\r\n                                    name=\"{{h.property}}\"\r\n                                    data-ng-model=\"newItem[h.property]\"\r\n                                    class=\"uk-width-1-1\"\r\n                                    ng-options=\"value as label for (label, value) in objectify(h.select.options)\"\r\n                                    ng-required=\"h.required\"\r\n                                    title=\"{{h.property}}\"></select>\r\n                        </div>\r\n\r\n                        <!-- AUTOCOMPLETE -->\r\n                        <div ng-switch-when=\"autocomplete\" class=\"uk-autocomplete uk-form uk-width-1-1\">\r\n                            <input name=\"{{h.property}}\"\r\n                                   type=\"text\"\r\n                                   placeholder=\"{{h.placeholder?h.placeholder:''}}\"\r\n                                   class=\"uk-width-1-1\"\r\n                                   ng-model=\"newItem[h.property]\"\r\n                                   data-uk-source-path=\"h.autocomplete.sourcePath\"\r\n                                   data-uk-source=\"h.autocomplete.source\"\r\n                                   data-uk-label=\"h.autocomplete.label\"\r\n                                   uk-ng-autocomplete\r\n                                   ng-required=\"h.required\">\r\n                        </div>\r\n\r\n                        <!-- NUMBER -->\r\n                        <input name=\"{{h.property}}\"\r\n                               ng-switch-when=\"number\"\r\n                               data-ng-model=\"newItem[h.property]\"\r\n                               type=\"number\"\r\n                               class=\"uk-width-1-1\"\r\n                               data-ng-max=\"{{h.number.max}}\"\r\n                               data-ng-min=\"{{h.number.min}}\"\r\n                               ng-required=\"h.required\"\r\n                               title=\"{{h.property}}\">\r\n\r\n                        <!-- DEFAULT -->\r\n                        <input name=\"{{h.property}}\"\r\n                               ng-switch-default\r\n                               data-ng-model=\"newItem[h.property]\"\r\n                               type=\"{{h.type}}\"\r\n                               placeholder=\"{{h.placeholder?h.placeholder:''}}\"\r\n                               class=\"uk-width-1-1\"\r\n                               ng-required=\"h.required\">\r\n                    </div>\r\n                </td>\r\n\r\n                <td class=\"jstableform-button\">\r\n                    <button ng-class=\"{'uk-text-success': newItemForm.$valid}\"\r\n                            type=\"button\"\r\n                            data-ng-click=\"addItem()\"\r\n                            class=\"uk-button uk-width-1-1 uk-height-1-1\"\r\n                            data-ng-disabled=\"newItemForm.$invalid\">\r\n                        <i class=\"uk-icon-plus uk-icon-small\"></i>\r\n                    </button>\r\n                </td>\r\n            </tr>\r\n            </tbody>\r\n        </table>\r\n    </fieldset>\r\n</div>";
window.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);
module.exports = path;

/***/ }),
/* 12 */
/***/ (function(module, exports) {

var path = 'C:/Users/Manuel/IdeaProjects/angular-uikit/src/angular-uikit-jsontableform.html';
var html = "<div class=\"uk-form uk-form-stacked\">\r\n    <fieldset>\r\n        <table ng-init=\"table.hasChild = false\" class=\"uk-table uk-ng-table-form\">\r\n            <thead ng-if=\"!allHeaderInHead && !noHeader\">\r\n            <tr>\r\n                <th ng-if=\"canReorder&&!readOnly\" class=\"reorder-button-group uk-text-center\">\r\n                    <a ng-class=\"{'inactive': selectedIndex==null || selectedIndex==model.length-1}\" ng-click=\"moveSelectedModelElementDown()\" class=\"uk-text-primary uk-icon-small uk-icon-hover uk-icon-caret-down\"></a>\r\n                    <a ng-class=\"{'inactive': !selectedIndex}\" ng-click=\"moveSelectedModelElementUp()\" class=\"uk-text-primary uk-icon-hover uk-icon-caret-up uk-icon-small\"></a>\r\n                </th>\r\n                <th data-ng-repeat=\"h in structure\">\r\n                    <div ng-switch=\"h.type\">\r\n                        <div ng-switch-when=\"array\" ng-init=\"table.hasChild = true\"></div>\r\n                        <span ng-switch-default><i ng-if=\"h.icon\" class=\"uk-icon-{{h.icon}}\"></i> {{h.label}}</span>\r\n                    </div>\r\n                </th>\r\n                <th ng-if=\"!readOnly\"></th>\r\n            </tr>\r\n            </thead>\r\n\r\n            <!-- TODO -->\r\n            <thead ng-if=\"allHeaderInHead\" ng-init=\"thead = getHeaders(structure)\">\r\n            <tr>\r\n                <th data-ng-repeat=\"h in thead.firstRow\" colspan=\"{{h.colspan}}\">{{h.label}}</th>\r\n            </tr>\r\n            <tr>\r\n                <th data-ng-repeat=\"h in thead.secondRow\">{{h.label}}</th>\r\n            </tr>\r\n            </thead>\r\n            <!-- --- -->\r\n\r\n            <tbody>\r\n            <tr class=\"\" data-ng-repeat=\"m in model track by $index\" ng-mouseenter=\"rowHover=true\" ng-mouseleave=\"rowHover=false\">\r\n                <td ng-if=\"canReorder && !readOnly\" class=\"uk-text-center uk-table-middle\" style=\"cursor: pointer\" ng-click=\"toggleIndexSelection($index)\">\r\n                    <i class=\"uk-icon uk-icon-circle uk-text-primary\" ng-show=\"selectedIndex==$index\"></i>\r\n                    <i class=\"uk-icon uk-icon-circle-o uk-text-primary\" ng-show=\"rowHover && selectedIndex!=$index\"></i>\r\n                </td>\r\n                <td data-ng-repeat=\"s in structure\" ng-class=\"{'uk-table-middle': s.type!= 'array'}\">\r\n                    <div ng-switch=\"s.type\">\r\n\r\n                        <!-- ARRAY -->\r\n                        <div ng-switch-when=\"array\">\r\n                            <div class=\"uk-accordion\" ng-if=\"!readOnly || m[s.property].length>0\"\r\n                                 data-uk-accordion=\"{showfirst: false, collapse: false, toggle: '.uk-accordion-title-{{s.property}}', containers:'.uk-accordion-content-{{s.property}}'}\">\r\n                                <a ng-init=\"accordion.show = false\" ng-click=\"accordion.show=!accordion.show\" class=\"uk-width-1-1 uk-button uk-button-primary uk-button-large uk-accordion-title-{{s.property}}\">\r\n                                <span class=\"uk-float-left\">\r\n                                    <i ng-if=\"s.icon\" class=\"uk-icon-{{s.icon}}\"></i> {{m[s.property].length}} {{s.label}}\r\n                                </span>\r\n\r\n                                <span class=\"uk-float-right\">\r\n                                    <i ng-hide=\"accordion.show\" class=\"uk-icon-caret-right\"></i>\r\n                                    <i ng-show=\"accordion.show\" class=\"uk-icon-caret-down\"></i>\r\n                                </span>\r\n                                </a>\r\n                                <div class=\"uk-accordion-content-{{s.property}}\">\r\n                                    <div data-uk-ng-json-table-form\r\n                                         data-model=\"m[s.property]\"\r\n                                         data-can-reorder=\"s.canReorder\"\r\n                                         data-structure=\"s.items\"\r\n                                         data-read-only=\"readOnly\"\r\n                                         data-delete-confirm-label=\"deleteConfirmLabel\"\r\n                                         data-all-header-in-head=\"allHeaderInHead\"\r\n                                         data-property-name=\"m[s.property]\">\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            <div ng-if=\"readOnly&&!m[s.property]\" class=\"uk-width-1-1 uk-button uk-button-large\" ng-class=\"{'jsontableform-highlight-border-odd': !oddIteration, 'jsontableform-highlight-border-even': oddIteration}\">\r\n                                <span class=\"uk-float-left uk-margin-left\">\r\n                                    <i ng-if=\"s.icon\" class=\"uk-icon-{{s.icon}}\"></i> 0 {{s.label}}\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- IMAGE -->\r\n                        <div ng-switch-when=\"image\">\r\n                            <img class=\"uk-thumbnail\" ng-style=\"{'max-width': s.image.maxWidth?s.image.maxWidth+'px':'100%', 'max-height': s.image.maxHeight?s.image.maxHeight+'px':'100%'}\" ng-src=\"{{m[s.property]?(s.image.interpolate? s.image.interpolate.base.replace(s.image.interpolate.value, s.image.interpolate.useId?m[s.property].id:m[s.property]): m[s.property]):s.image.default}}\" alt=\"\">\r\n                        </div>\r\n\r\n                        <!-- AUTOCOMPLETE -->\r\n                        <div ng-switch-when=\"autocomplete\">{{m[s.property][s.autocomplete.label]?m[s.property][s.autocomplete.label]:m[s.property]}}</div>\r\n\r\n                        <!-- TODO Modifica autocomplete non inserisce il valore vecchio-->\r\n                        <!--<div ng-switch-when=\"autocomplete\" class=\"uk-autocomplete uk-form uk-width-1-1\">\r\n                            <input name=\"{{s.property}}\"\r\n                                   type=\"text\"\r\n                                   placeholder=\"{{s.placeholder?s.placeholder:''}}\"\r\n                                   class=\"uk-width-1-1\" ng-model=\"m[s.property]\"\r\n                                   data-uk-source-path=\"s.autocomplete.sourcePath\"\r\n                                   data-uk-source=\"s.autocomplete.source\"\r\n                                   data-uk-label=\"s.autocomplete.label\"\r\n                                   uk-ng-autocomplete\r\n                                   required>\r\n                        </div>-->\r\n\r\n\r\n                        <!-- SEQUENCE -->\r\n                        <div ng-switch-when=\"sequence\">{{m.sequence = $parent.$parent.$index + 1}}</div>\r\n\r\n                        <!-- SELECT -->\r\n                        <div ng-switch-when=\"select\">\r\n                            <div ng-if=\"!readOnly\">\r\n                                <select ng-if=\"s.select.label\"\r\n                                        name=\"{{s.property}}\"\r\n                                        data-ng-model=\"m[s.property]\"\r\n                                        class=\"uk-form-blank uk-width-1-1\"\r\n                                        ng-options=\"opt[s.select.label] for opt in s.select.options track by opt[s.select.id]\"\r\n                                        ng-required=\"s.required\"\r\n                                        title=\"{{s.property}}\"></select>\r\n\r\n                                <select ng-if=\"!s.select.label\"\r\n                                        name=\"{{s.property}}\"\r\n                                        data-ng-model=\"m[s.property]\"\r\n                                        class=\"uk-form-blank uk-width-1-1\"\r\n                                        ng-options=\"value as label for (label, value) in objectify(s.select.options)\"\r\n                                        ng-required=\"s.required\"\r\n                                        title=\"{{s.property}}\"></select>\r\n                            </div>\r\n                            <div ng-if=\"readOnly\">\r\n                                <div ng-if=\"s.select.label\">{{m[s.property][s.select.label]}}</div>\r\n                                <div ng-if=\"!s.select.label\">{{m[s.property]}}</div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- NUMBER -->\r\n\r\n                        <div ng-switch-when=\"number\">\r\n                            <input name=\"{{s.property}}\"\r\n                                   data-ng-model=\"m[s.property]\"\r\n                                   type=\"number\"\r\n                                   class=\"uk-form-blank uk-width-1-1\"\r\n                                   data-ng-max=\"{{s.number.max}}\"\r\n                                   data-ng-min=\"{{s.number.min}}\"\r\n                                   ng-required=\"s.required\"\r\n                                   title=\"{{s.property}}\"\r\n                                   ng-if=\"!readOnly\">\r\n                            <div ng-if=\"readOnly\">\r\n                                {{m[s.property]}}\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <!-- DEFAULT -->\r\n\r\n                        <div ng-switch-default>\r\n                            <input name=\"{{s.property}}\"\r\n                                   data-ng-model=\"m[s.property]\"\r\n                                   type=\"{{s.type}}\"\r\n                                   placeholder=\"{{s.placeholder?s.placeholder:''}}\"\r\n                                   class=\"uk-form-blank uk-width-1-1\"\r\n                                   ng-required=\"s.required\"\r\n                                   ng-if=\"!readOnly\">\r\n\r\n                            <div ng-if=\"readOnly\">\r\n                                {{m[s.property]}}\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                </td>\r\n\r\n                <!-- TRASH BUTTON -->\r\n                <td ng-if=\"!readOnly\" class=\"jstableform-button\">\r\n                    <button type=\"button\" class=\"uk-button uk-text-danger uk-width-1-1 uk-height-1-1\" ng-click=\"removeItem($index)\">\r\n                        <i class=\"uk-icon-trash uk-icon-small\"></i>\r\n                    </button>\r\n                </td>\r\n            </tr>\r\n\r\n            <tr ng-if=\"!readOnly\" ng-form=\"newItemForm\" hx-submit-on-enter-allowed=\"submitOnEnter\" hx-submit-on-enter=\"addItem()\">\r\n                <td ng-if=\"canReorder\"></td>\r\n\r\n                <td data-ng-repeat=\"h in structure\">\r\n                    <div ng-switch=\"h.type\">\r\n                        <!-- ARRAY -->\r\n                        <span ng-switch-when=\"array\"></span>\r\n\r\n                        <!-- SEQUENCE -->\r\n                        <span ng-switch-when=\"sequence\">#</span>\r\n\r\n                        <!-- SELECT -->\r\n                        <div ng-switch-when=\"select\">\r\n                            <select ng-if=\"h.select.label\"\r\n                                    name=\"{{h.property}}\"\r\n                                    data-ng-model=\"newItem[h.property]\"\r\n                                    class=\"uk-width-1-1\"\r\n                                    ng-options=\"opt[h.select.label] for opt in h.select.options track by opt[h.select.id]\"\r\n                                    ng-required=\"h.required\"\r\n                                    title=\"{{h.property}}\"></select>\r\n\r\n                            <select ng-if=\"!h.select.label\"\r\n                                    name=\"{{h.property}}\"\r\n                                    data-ng-model=\"newItem[h.property]\"\r\n                                    class=\"uk-width-1-1\"\r\n                                    ng-options=\"value as label for (label, value) in objectify(h.select.options)\"\r\n                                    ng-required=\"h.required\"\r\n                                    title=\"{{h.property}}\"></select>\r\n                        </div>\r\n\r\n                        <!-- AUTOCOMPLETE -->\r\n                        <div ng-switch-when=\"autocomplete\" class=\"uk-autocomplete uk-form uk-width-1-1\">\r\n                            <input name=\"{{h.property}}\"\r\n                                   type=\"text\"\r\n                                   placeholder=\"{{h.placeholder?h.placeholder:''}}\"\r\n                                   class=\"uk-width-1-1\"\r\n                                   ng-model=\"newItem[h.property]\"\r\n                                   data-uk-source-path=\"h.autocomplete.sourcePath\"\r\n                                   data-uk-source=\"h.autocomplete.source\"\r\n                                   data-uk-label=\"h.autocomplete.label\"\r\n                                   uk-ng-autocomplete\r\n                                   ng-required=\"h.required\">\r\n                        </div>\r\n\r\n                        <!-- NUMBER -->\r\n                        <input name=\"{{h.property}}\"\r\n                               ng-switch-when=\"number\"\r\n                               data-ng-model=\"newItem[h.property]\"\r\n                               type=\"number\"\r\n                               class=\"uk-width-1-1\"\r\n                               data-ng-max=\"{{h.number.max}}\"\r\n                               data-ng-min=\"{{h.number.min}}\"\r\n                               ng-required=\"h.required\"\r\n                               title=\"{{h.property}}\">\r\n\r\n                        <!-- DEFAULT -->\r\n                        <input name=\"{{h.property}}\"\r\n                               ng-switch-default\r\n                               data-ng-model=\"newItem[h.property]\"\r\n                               type=\"{{h.type}}\"\r\n                               placeholder=\"{{h.placeholder?h.placeholder:''}}\"\r\n                               class=\"uk-width-1-1\"\r\n                               ng-required=\"h.required\">\r\n                    </div>\r\n                </td>\r\n\r\n                <td class=\"jstableform-button\">\r\n                    <button ng-class=\"{'uk-text-success': newItemForm.$valid}\"\r\n                            type=\"button\"\r\n                            data-ng-click=\"addItem()\"\r\n                            class=\"uk-button uk-width-1-1 uk-height-1-1\"\r\n                            data-ng-disabled=\"newItemForm.$invalid\">\r\n                        <i class=\"uk-icon-plus uk-icon-small\"></i>\r\n                    </button>\r\n                </td>\r\n            </tr>\r\n            </tbody>\r\n        </table>\r\n    </fieldset>\r\n</div>";
window.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);
module.exports = path;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _angularUikitAutocomplete = __webpack_require__(0);

var _angularUikitAutocomplete2 = _interopRequireDefault(_angularUikitAutocomplete);

var _angularUikitPagination = __webpack_require__(5);

var _angularUikitPagination2 = _interopRequireDefault(_angularUikitPagination);

var _angularUikitJsontableform = __webpack_require__(3);

var _angularUikitJsontableform2 = _interopRequireDefault(_angularUikitJsontableform);

var _angularUikitCalendar = __webpack_require__(1);

var _angularUikitCalendar2 = _interopRequireDefault(_angularUikitCalendar);

var _angularUikitSortableItem = __webpack_require__(6);

var _angularUikitSortableItem2 = _interopRequireDefault(_angularUikitSortableItem);

var _angularUikitSortable = __webpack_require__(7);

var _angularUikitSortable2 = _interopRequireDefault(_angularUikitSortable);

var _angularUikitNotallowarrayduplicate = __webpack_require__(4);

var _angularUikitNotallowarrayduplicate2 = _interopRequireDefault(_angularUikitNotallowarrayduplicate);

var _angularUikitHxSubmitOnEnter = __webpack_require__(2);

var _angularUikitHxSubmitOnEnter2 = _interopRequireDefault(_angularUikitHxSubmitOnEnter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

angular.module('angularUikit', []).directive('ukNgAutocomplete', _angularUikitAutocomplete2.default).directive('ukNgPagination', _angularUikitPagination2.default).directive('ukNgJsonTableForm', _angularUikitJsontableform2.default).directive('ukNgCalendar', _angularUikitCalendar2.default).directive('ukNgSortableItem', _angularUikitSortableItem2.default).directive('ukNgSortable', _angularUikitSortable2.default).directive('ukNgNotAllowArrayDuplicate', _angularUikitNotallowarrayduplicate2.default).directive('hxSubmitOnEnter', _angularUikitHxSubmitOnEnter2.default);

/***/ })
/******/ ]);
//# sourceMappingURL=angular-uikit.min.js.map